name: Label issues from dropdowns

on:
  issues:
    types: [opened]

jobs:
  label_from_dropdown:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Apply labels based on dropdown choices
        uses: actions/github-script@v7
        with:
          script: |
            const areaLabels = ['Metrics', 'Charts', 'Settings', 'Notifications', 'Other'];
            const componentLabels = ['CPU', 'GPU', 'Memory', 'Docker', 'Network', 'Other'];

            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get the issue body
            const body = context.payload.issue.body;

            // Helper to find dropdown value in the body (assuming markdown format)
            function extractSectionValue(heading) {
              const regex = new RegExp(`### ${heading}\\s+([\\s\\S]*?)(?:\\n###|$)`, 'i');
              const match = body.match(regex);
              if (match) {
                // Get the first non-empty line after the heading
                const lines = match[1].split('\n').map(l => l.trim()).filter(Boolean);
                return lines[0] || null;
              }
              return null;
            }

            // Extract dropdown selections
            const product = extractSectionValue('Product');
            const area = extractSectionValue('Area');
            const component = extractSectionValue('Component');

            // Build labels to add
            let labelsToAdd = [];
            if (product) labelsToAdd.push(product);
            if (area) labelsToAdd.push(area);
            if (component) labelsToAdd.push(component);

            // Get existing labels in the repo
            const { data: existingLabels } = await github.rest.issues.listLabelsForRepo({
              owner,
              repo,
              per_page: 100
            });
            const existingLabelNames = existingLabels.map(l => l.name);

            // Apply labels if any and they exist in the repo
            const filteredLabels = labelsToAdd.filter(label => existingLabelNames.includes(label));
            if (filteredLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issueNumber,
                labels: filteredLabels
              });
            } 